/*************************************************************/
/* Copyright (C) 2018 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: UC Berkeley (Trial), License 76702Z 76702Z. */
/* Abstract syntax: objects */
/* Created: Tue Apr 17 19:03:42 2018 */
/* ASN.1/C++ compiler version: 6.6 */
/* Code generated for runtime version 6.6 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: Intel 64 or AMD64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: Intel 64 or AMD64 */
/* C++ compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -der -allow universaltags objects.asn
 */

#ifndef OSS_objects
#define OSS_objects

#include "oss.h"
#include "asn1.h"

/* Representation types */


const OSS_INT32 certification = 1;
const OSS_INT32 attestation = 2;
const OSS_INT32 signing = 3;
const OSS_INT32 authentication = 4;
const OSS_INT32 authorization = 5;
const OSS_INT32 encryption = 6;
typedef OssString HashSha3_256;

typedef OssString HashSha_256;

typedef OssString HashKeccak_256;

typedef OssString AVKeyAES128_GCM;

typedef OssString Private_Ed25519;

typedef OssString Private_Curve25519;

typedef OssString Private_BN256_OAQUE;

typedef OssString Private_BN256_IBE;

typedef OssString Master_BN256_OAQUE;

typedef OssString Master_BN256_IBE;

typedef OssString Public_Ed25519;

typedef OssString Public_Curve25519;

typedef OssString Params_BN256_OAQUE;

typedef OssString Params_BN256_IBE;

class OSS_PUBLIC HashSchemes_Type : public OssConstrainedOpenType
{
public:
    HashSchemes_Type();
    HashSchemes_Type(const HashSchemes_Type &);
    ~HashSchemes_Type();
    HashSchemes_Type & operator = (const HashSchemes_Type &);
    int operator == (const HashSchemes_Type &) const;
    int operator != (const HashSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    HashSha3_256 *get_HashSha3_256();
    const HashSha3_256 *get_HashSha3_256() const;
    void set_HashSha3_256(const HashSha3_256 &);
    HashSha3_256 *release_HashSha3_256();
    void set_HashSha3_256(HashSha3_256 *);

    HashKeccak_256 *get_HashKeccak_256();
    const HashKeccak_256 *get_HashKeccak_256() const;
    void set_HashKeccak_256(const HashKeccak_256 &);
    HashKeccak_256 *release_HashKeccak_256();
    void set_HashKeccak_256(HashKeccak_256 *);

    HashSha_256 *get_HashSha_256();
    const HashSha_256 *get_HashSha_256() const;
    void set_HashSha_256(const HashSha_256 &);
    HashSha_256 *release_HashSha_256();
    void set_HashSha_256(HashSha_256 *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __shared1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef HashSchemes_Type value;

    __shared1();
    __shared1(const __shared1 &);
    __shared1(const type_id &, const value &);

    __shared1 & operator = (const __shared1 &);
    int operator == (const __shared1 &) const;
    int operator != (const __shared1 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

typedef __shared1 Hash;

typedef __shared1 EntityHash;

class OSS_PUBLIC LocationURL   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString value;
    typedef OSS_INT32 apiVersion;

    LocationURL();
    LocationURL(const LocationURL &);
    LocationURL(const value &, apiVersion);

    LocationURL & operator = (const LocationURL &);
    int operator == (const LocationURL &) const;
    int operator != (const LocationURL &) const;

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);

    apiVersion & get_apiVersion();
    apiVersion get_apiVersion() const;
    void set_apiVersion(apiVersion);
private:
    value value_field;
    apiVersion apiVersion_field;
};

class OSS_PUBLIC LocationEthereum   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 chainID;
    typedef OSS_INT32 contractAddress;

    LocationEthereum();
    LocationEthereum(const LocationEthereum &);
    LocationEthereum(chainID, contractAddress);

    LocationEthereum & operator = (const LocationEthereum &);
    int operator == (const LocationEthereum &) const;
    int operator != (const LocationEthereum &) const;

    chainID & get_chainID();
    chainID get_chainID() const;
    void set_chainID(chainID);

    contractAddress & get_contractAddress();
    contractAddress get_contractAddress() const;
    void set_contractAddress(contractAddress);
private:
    chainID chainID_field;
    contractAddress contractAddress_field;
};

class OSS_PUBLIC LocationSchemes_Type : public OssConstrainedOpenType
{
public:
    LocationSchemes_Type();
    LocationSchemes_Type(const LocationSchemes_Type &);
    ~LocationSchemes_Type();
    LocationSchemes_Type & operator = (const LocationSchemes_Type &);
    int operator == (const LocationSchemes_Type &) const;
    int operator != (const LocationSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    LocationURL *get_LocationURL();
    const LocationURL *get_LocationURL() const;
    void set_LocationURL(const LocationURL &);
    LocationURL *release_LocationURL();
    void set_LocationURL(LocationURL *);

    LocationEthereum *get_LocationEthereum();
    const LocationEthereum *get_LocationEthereum() const;
    void set_LocationEthereum(const LocationEthereum &);
    LocationEthereum *release_LocationEthereum();
    void set_LocationEthereum(LocationEthereum *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC Location   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef LocationSchemes_Type value;

    Location();
    Location(const Location &);
    Location(const type_id &, const value &);

    Location & operator = (const Location &);
    int operator == (const Location &) const;
    int operator != (const Location &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC RevocationOption;

class OSS_PUBLIC __seqof1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RevocationOption component;

    __seqof1();
    __seqof1(const __seqof1 &);
    ~__seqof1();

    __seqof1 & operator = (const __seqof1 &);
    int operator == (const __seqof1 &) const;
    int operator != (const __seqof1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof1 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Extension;

class OSS_PUBLIC __shared2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef Extension component;

    __shared2();
    __shared2(const __shared2 &);
    ~__shared2();

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared2 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared2 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq5   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssUTCTime notBefore;
    typedef OssUTCTime notAfter;

    __seq5();
    __seq5(const __seq5 &);
    __seq5(const notBefore &, const notAfter &);

    __seq5 & operator = (const __seq5 &);
    int operator == (const __seq5 &) const;
    int operator != (const __seq5 &) const;

    notBefore & get_notBefore();
    const notBefore & get_notBefore() const;
    void set_notBefore(const notBefore &);

    notAfter & get_notAfter();
    const notAfter & get_notAfter() const;
    void set_notAfter(const notAfter &);
private:
    notBefore notBefore_field;
    notAfter notAfter_field;
};

class OSS_PUBLIC TrustLevel   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 trust;

    TrustLevel();
    TrustLevel(const TrustLevel &);
    TrustLevel(trust);

    TrustLevel & operator = (const TrustLevel &);
    int operator == (const TrustLevel &) const;
    int operator != (const TrustLevel &) const;

    trust & get_trust();
    trust get_trust() const;
    void set_trust(trust);
private:
    trust trust_field;
};

class OSS_PUBLIC RTreeStatement;

class OSS_PUBLIC __seqof15 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RTreeStatement component;

    __seqof15();
    __seqof15(const __seqof15 &);
    ~__seqof15();

    __seqof15 & operator = (const __seqof15 &);
    int operator == (const __seqof15 &) const;
    int operator != (const __seqof15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof15 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof15 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC RTreePolicy   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 RTreePolicy_namespace;
    typedef OSS_INT32 indirections;
    typedef __seqof15 statements;

    RTreePolicy();
    RTreePolicy(const RTreePolicy &);
    RTreePolicy(const RTreePolicy_namespace &, indirections, const statements &);

    RTreePolicy & operator = (const RTreePolicy &);
    int operator == (const RTreePolicy &) const;
    int operator != (const RTreePolicy &) const;

    RTreePolicy_namespace & get_RTreePolicy_namespace();
    const RTreePolicy_namespace & get_RTreePolicy_namespace() const;
    void set_RTreePolicy_namespace(const RTreePolicy_namespace &);

    indirections & get_indirections();
    indirections get_indirections() const;
    void set_indirections(indirections);

    statements & get_statements();
    const statements & get_statements() const;
    void set_statements(const statements &);
private:
    RTreePolicy_namespace RTreePolicy_namespace_field;
    indirections indirections_field;
    statements statements_field;
};

class OSS_PUBLIC PolicySchemes_Type : public OssConstrainedOpenType
{
public:
    PolicySchemes_Type();
    PolicySchemes_Type(const PolicySchemes_Type &);
    ~PolicySchemes_Type();
    PolicySchemes_Type & operator = (const PolicySchemes_Type &);
    int operator == (const PolicySchemes_Type &) const;
    int operator != (const PolicySchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    TrustLevel *get_TrustLevel();
    const TrustLevel *get_TrustLevel() const;
    void set_TrustLevel(const TrustLevel &);
    TrustLevel *release_TrustLevel();
    void set_TrustLevel(TrustLevel *);

    RTreePolicy *get_RTreePolicy();
    const RTreePolicy *get_RTreePolicy() const;
    void set_RTreePolicy(const RTreePolicy &);
    RTreePolicy *release_RTreePolicy();
    void set_RTreePolicy(RTreePolicy *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq6   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef PolicySchemes_Type value;

    __seq6();
    __seq6(const __seq6 &);
    __seq6(const type_id &, const value &);

    __seq6 & operator = (const __seq6 &);
    int operator == (const __seq6 &) const;
    int operator != (const __seq6 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC __seq11   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID outerSignatureScheme;
    typedef OssString verifyingKey;

    __seq11();
    __seq11(const __seq11 &);
    __seq11(const outerSignatureScheme &, const verifyingKey &);

    __seq11 & operator = (const __seq11 &);
    int operator == (const __seq11 &) const;
    int operator != (const __seq11 &) const;

    outerSignatureScheme & get_outerSignatureScheme();
    const outerSignatureScheme & get_outerSignatureScheme() const;
    void set_outerSignatureScheme(const outerSignatureScheme &);

    verifyingKey & get_verifyingKey();
    const verifyingKey & get_verifyingKey() const;
    void set_verifyingKey(const verifyingKey &);
private:
    outerSignatureScheme outerSignatureScheme_field;
    verifyingKey verifyingKey_field;
};

class OSS_PUBLIC SignedOuterKey   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seq11 tbs;
    typedef OssString signature;

    SignedOuterKey();
    SignedOuterKey(const SignedOuterKey &);
    SignedOuterKey(const tbs &, const signature &);

    SignedOuterKey & operator = (const SignedOuterKey &);
    int operator == (const SignedOuterKey &) const;
    int operator != (const SignedOuterKey &) const;

    tbs & get_tbs();
    const tbs & get_tbs() const;
    void set_tbs(const tbs &);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);
private:
    tbs tbs_field;
    signature signature_field;
};

class OSS_PUBLIC OuterSignatureBindingSchemes_Type : public OssConstrainedOpenType
{
public:
    OuterSignatureBindingSchemes_Type();
    OuterSignatureBindingSchemes_Type(const OuterSignatureBindingSchemes_Type &);
    ~OuterSignatureBindingSchemes_Type();
    OuterSignatureBindingSchemes_Type & operator = (const OuterSignatureBindingSchemes_Type &);
    int operator == (const OuterSignatureBindingSchemes_Type &) const;
    int operator != (const OuterSignatureBindingSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    SignedOuterKey *get_SignedOuterKey();
    const SignedOuterKey *get_SignedOuterKey() const;
    void set_SignedOuterKey(const SignedOuterKey &);
    SignedOuterKey *release_SignedOuterKey();
    void set_SignedOuterKey(SignedOuterKey *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq7   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef OuterSignatureBindingSchemes_Type value;

    __seq7();
    __seq7(const __seq7 &);
    __seq7(const type_id &, const value &);

    __seq7 & operator = (const __seq7 &);
    int operator == (const __seq7 &) const;
    int operator != (const __seq7 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC AttestationVerifierBody   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 attester;
    typedef Location attesterLocation;
    typedef __seq5 validity;
    typedef __seq6 policy;
    typedef __shared2 extensions;
    typedef __seq7 outerSignatureBinding;

    AttestationVerifierBody();
    AttestationVerifierBody(const AttestationVerifierBody &);
    AttestationVerifierBody(const attester &, const attesterLocation &, const validity &, 
	const policy &, const extensions &, const outerSignatureBinding &);

    AttestationVerifierBody & operator = (const AttestationVerifierBody &);
    int operator == (const AttestationVerifierBody &) const;
    int operator != (const AttestationVerifierBody &) const;

    attester & get_attester();
    const attester & get_attester() const;
    void set_attester(const attester &);

    attesterLocation & get_attesterLocation();
    const attesterLocation & get_attesterLocation() const;
    void set_attesterLocation(const attesterLocation &);

    validity & get_validity();
    const validity & get_validity() const;
    void set_validity(const validity &);

    policy & get_policy();
    const policy & get_policy() const;
    void set_policy(const policy &);

    extensions & get_extensions();
    const extensions & get_extensions() const;
    void set_extensions(const extensions &);

    outerSignatureBinding & get_outerSignatureBinding();
    const outerSignatureBinding & get_outerSignatureBinding() const;
    void set_outerSignatureBinding(const outerSignatureBinding &);
private:
    attester attester_field;
    attesterLocation attesterLocation_field;
    validity validity_field;
    policy policy_field;
    extensions extensions_field;
    outerSignatureBinding outerSignatureBinding_field;
};

class OSS_PUBLIC PolicyAddendum;

class OSS_PUBLIC __seqof3 : public OssList  /* SEQUENCE OF */
{
public:
    typedef PolicyAddendum component;

    __seqof3();
    __seqof3(const __seqof3 &);
    ~__seqof3();

    __seqof3 & operator = (const __seqof3 &);
    int operator == (const __seqof3 &) const;
    int operator != (const __seqof3 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof3 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof3 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof3 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC AttestationBody   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef AttestationVerifierBody verifierBody;
    typedef __seqof3 proverPolicyAddendums;
    typedef __shared2 proverExtensions;

    AttestationBody();
    AttestationBody(const AttestationBody &);
    AttestationBody(const verifierBody &, const proverPolicyAddendums &, const proverExtensions &);

    AttestationBody & operator = (const AttestationBody &);
    int operator == (const AttestationBody &) const;
    int operator != (const AttestationBody &) const;

    verifierBody & get_verifierBody();
    const verifierBody & get_verifierBody() const;
    void set_verifierBody(const verifierBody &);

    proverPolicyAddendums & get_proverPolicyAddendums();
    const proverPolicyAddendums & get_proverPolicyAddendums() const;
    void set_proverPolicyAddendums(const proverPolicyAddendums &);

    proverExtensions & get_proverExtensions();
    const proverExtensions & get_proverExtensions() const;
    void set_proverExtensions(const proverExtensions &);
private:
    verifierBody verifierBody_field;
    proverPolicyAddendums proverPolicyAddendums_field;
    proverExtensions proverExtensions_field;
};

class OSS_PUBLIC WR1BodyCiphertext   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString verifierBodyCiphertext;
    typedef OssString proverBodyCiphertext;
    typedef OssString envelopeCiphertext;
    typedef OssString envelopeKey_ibe_bn256;
    typedef OssString envelopeKey_curve25519;

    WR1BodyCiphertext();
    WR1BodyCiphertext(const WR1BodyCiphertext &);
    WR1BodyCiphertext(const verifierBodyCiphertext &, const proverBodyCiphertext &, 
	const envelopeCiphertext &, const envelopeKey_ibe_bn256 &, const envelopeKey_curve25519 &);

    WR1BodyCiphertext & operator = (const WR1BodyCiphertext &);
    int operator == (const WR1BodyCiphertext &) const;
    int operator != (const WR1BodyCiphertext &) const;

    verifierBodyCiphertext & get_verifierBodyCiphertext();
    const verifierBodyCiphertext & get_verifierBodyCiphertext() const;
    void set_verifierBodyCiphertext(const verifierBodyCiphertext &);

    proverBodyCiphertext & get_proverBodyCiphertext();
    const proverBodyCiphertext & get_proverBodyCiphertext() const;
    void set_proverBodyCiphertext(const proverBodyCiphertext &);

    envelopeCiphertext & get_envelopeCiphertext();
    const envelopeCiphertext & get_envelopeCiphertext() const;
    void set_envelopeCiphertext(const envelopeCiphertext &);

    envelopeKey_ibe_bn256 & get_envelopeKey_ibe_bn256();
    const envelopeKey_ibe_bn256 & get_envelopeKey_ibe_bn256() const;
    void set_envelopeKey_ibe_bn256(const envelopeKey_ibe_bn256 &);

    envelopeKey_curve25519 & get_envelopeKey_curve25519();
    const envelopeKey_curve25519 & get_envelopeKey_curve25519() const;
    void set_envelopeKey_curve25519(const envelopeKey_curve25519 &);
private:
    verifierBodyCiphertext verifierBodyCiphertext_field;
    proverBodyCiphertext proverBodyCiphertext_field;
    envelopeCiphertext envelopeCiphertext_field;
    envelopeKey_ibe_bn256 envelopeKey_ibe_bn256_field;
    envelopeKey_curve25519 envelopeKey_curve25519_field;
};

class OSS_PUBLIC __shared4 : public OssList  /* SET OF */
{
public:
    typedef OSS_INT32 component;

    __shared4();
    __shared4(const __shared4 &);
    ~__shared4();

    __shared4 & operator = (const __shared4 &);
    int operator == (const __shared4 &) const;
    int operator != (const __shared4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared4 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared4 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared4 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared3 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OssString component;

    __shared3();
    __shared3(const __shared3 &);
    ~__shared3();

    __shared3 & operator = (const __shared3 &);
    int operator == (const __shared3 &) const;
    int operator != (const __shared3 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared3 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared3 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared3 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC Public_OAQUE   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString params;
    typedef __shared3 attributeset;

    Public_OAQUE();
    Public_OAQUE(const Public_OAQUE &);
    Public_OAQUE(const params &, const attributeset &);

    Public_OAQUE & operator = (const Public_OAQUE &);
    int operator == (const Public_OAQUE &) const;
    int operator != (const Public_OAQUE &) const;

    params & get_params();
    const params & get_params() const;
    void set_params(const params &);

    attributeset & get_attributeset();
    const attributeset & get_attributeset() const;
    void set_attributeset(const attributeset &);
private:
    params params_field;
    attributeset attributeset_field;
};

class OSS_PUBLIC Public_BN256_IBE   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString params;
    typedef OssString id;

    Public_BN256_IBE();
    Public_BN256_IBE(const Public_BN256_IBE &);
    Public_BN256_IBE(const params &, const id &);

    Public_BN256_IBE & operator = (const Public_BN256_IBE &);
    int operator == (const Public_BN256_IBE &) const;
    int operator != (const Public_BN256_IBE &) const;

    params & get_params();
    const params & get_params() const;
    void set_params(const params &);

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);
private:
    params params_field;
    id id_field;
};

class OSS_PUBLIC EntityKeySchemes_Type : public OssConstrainedOpenType
{
public:
    EntityKeySchemes_Type();
    EntityKeySchemes_Type(const EntityKeySchemes_Type &);
    ~EntityKeySchemes_Type();
    EntityKeySchemes_Type & operator = (const EntityKeySchemes_Type &);
    int operator == (const EntityKeySchemes_Type &) const;
    int operator != (const EntityKeySchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    Public_Ed25519 *get_Public_Ed25519();
    const Public_Ed25519 *get_Public_Ed25519() const;
    void set_Public_Ed25519(const Public_Ed25519 &);
    Public_Ed25519 *release_Public_Ed25519();
    void set_Public_Ed25519(Public_Ed25519 *);

    Public_Curve25519 *get_Public_Curve25519();
    const Public_Curve25519 *get_Public_Curve25519() const;
    void set_Public_Curve25519(const Public_Curve25519 &);
    Public_Curve25519 *release_Public_Curve25519();
    void set_Public_Curve25519(Public_Curve25519 *);

    Public_OAQUE *get_Public_OAQUE();
    const Public_OAQUE *get_Public_OAQUE() const;
    void set_Public_OAQUE(const Public_OAQUE &);
    Public_OAQUE *release_Public_OAQUE();
    void set_Public_OAQUE(Public_OAQUE *);

    Params_BN256_OAQUE *get_Params_BN256_OAQUE();
    const Params_BN256_OAQUE *get_Params_BN256_OAQUE() const;
    void set_Params_BN256_OAQUE(const Params_BN256_OAQUE &);
    Params_BN256_OAQUE *release_Params_BN256_OAQUE();
    void set_Params_BN256_OAQUE(Params_BN256_OAQUE *);

    Params_BN256_IBE *get_Params_BN256_IBE();
    const Params_BN256_IBE *get_Params_BN256_IBE() const;
    void set_Params_BN256_IBE(const Params_BN256_IBE &);
    Params_BN256_IBE *release_Params_BN256_IBE();
    void set_Params_BN256_IBE(Params_BN256_IBE *);

    Public_BN256_IBE *get_Public_BN256_IBE();
    const Public_BN256_IBE *get_Public_BN256_IBE() const;
    void set_Public_BN256_IBE(const Public_BN256_IBE &);
    Public_BN256_IBE *release_Public_BN256_IBE();
    void set_Public_BN256_IBE(Public_BN256_IBE *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq8   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef EntityKeySchemes_Type value;

    __seq8();
    __seq8(const __seq8 &);
    __seq8(const type_id &, const value &);

    __seq8 & operator = (const __seq8 &);
    int operator == (const __seq8 &) const;
    int operator != (const __seq8 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC EntityPublicKey   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared4 capabilityFlags;
    typedef __seq8 key;

    EntityPublicKey();
    EntityPublicKey(const EntityPublicKey &);
    EntityPublicKey(const capabilityFlags &, const key &);

    EntityPublicKey & operator = (const EntityPublicKey &);
    int operator == (const EntityPublicKey &) const;
    int operator != (const EntityPublicKey &) const;

    capabilityFlags & get_capabilityFlags();
    const capabilityFlags & get_capabilityFlags() const;
    void set_capabilityFlags(const capabilityFlags &);

    key & get_key();
    const key & get_key() const;
    void set_key(const key &);
private:
    capabilityFlags capabilityFlags_field;
    key key_field;
};

class OSS_PUBLIC PSKBodyCiphertext   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString attestationBodyCiphertext;
    typedef EntityPublicKey encryptedUnder;

    PSKBodyCiphertext();
    PSKBodyCiphertext(const PSKBodyCiphertext &);
    PSKBodyCiphertext(const attestationBodyCiphertext &, const encryptedUnder &);

    PSKBodyCiphertext & operator = (const PSKBodyCiphertext &);
    int operator == (const PSKBodyCiphertext &) const;
    int operator != (const PSKBodyCiphertext &) const;

    attestationBodyCiphertext & get_attestationBodyCiphertext();
    const attestationBodyCiphertext & get_attestationBodyCiphertext() const;
    void set_attestationBodyCiphertext(const attestationBodyCiphertext &);

    encryptedUnder & get_encryptedUnder();
    const encryptedUnder & get_encryptedUnder() const;
    void set_encryptedUnder(const encryptedUnder &);
private:
    attestationBodyCiphertext attestationBodyCiphertext_field;
    encryptedUnder encryptedUnder_field;
};

class OSS_PUBLIC AttestationBodySchemes_Type : public OssConstrainedOpenType
{
public:
    AttestationBodySchemes_Type();
    AttestationBodySchemes_Type(const AttestationBodySchemes_Type &);
    ~AttestationBodySchemes_Type();
    AttestationBodySchemes_Type & operator = (const AttestationBodySchemes_Type &);
    int operator == (const AttestationBodySchemes_Type &) const;
    int operator != (const AttestationBodySchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    AttestationBody *get_AttestationBody();
    const AttestationBody *get_AttestationBody() const;
    void set_AttestationBody(const AttestationBody &);
    AttestationBody *release_AttestationBody();
    void set_AttestationBody(AttestationBody *);

    WR1BodyCiphertext *get_WR1BodyCiphertext();
    const WR1BodyCiphertext *get_WR1BodyCiphertext() const;
    void set_WR1BodyCiphertext(const WR1BodyCiphertext &);
    WR1BodyCiphertext *release_WR1BodyCiphertext();
    void set_WR1BodyCiphertext(WR1BodyCiphertext *);

    PSKBodyCiphertext *get_PSKBodyCiphertext();
    const PSKBodyCiphertext *get_PSKBodyCiphertext() const;
    void set_PSKBodyCiphertext(const PSKBodyCiphertext &);
    PSKBodyCiphertext *release_PSKBodyCiphertext();
    void set_PSKBodyCiphertext(PSKBodyCiphertext *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq2   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef AttestationBodySchemes_Type value;

    __seq2();
    __seq2(const __seq2 &);
    __seq2(const type_id &, const value &);

    __seq2 & operator = (const __seq2 &);
    int operator == (const __seq2 &) const;
    int operator != (const __seq2 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC __seq3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 subject;
    typedef Location subjectLocation;
    typedef __seqof1 revocations;
    typedef __shared2 publicExtensions;
    typedef __seq2 body;

    __seq3();
    __seq3(const __seq3 &);
    __seq3(const subject &, const subjectLocation &, const revocations &, const publicExtensions &, 
	const body &);

    __seq3 & operator = (const __seq3 &);
    int operator == (const __seq3 &) const;
    int operator != (const __seq3 &) const;

    subject & get_subject();
    const subject & get_subject() const;
    void set_subject(const subject &);

    subjectLocation & get_subjectLocation();
    const subjectLocation & get_subjectLocation() const;
    void set_subjectLocation(const subjectLocation &);

    revocations & get_revocations();
    const revocations & get_revocations() const;
    void set_revocations(const revocations &);

    publicExtensions & get_publicExtensions();
    const publicExtensions & get_publicExtensions() const;
    void set_publicExtensions(const publicExtensions &);

    body & get_body();
    const body & get_body() const;
    void set_body(const body &);
private:
    subject subject_field;
    subjectLocation subjectLocation_field;
    revocations revocations_field;
    publicExtensions publicExtensions_field;
    body body_field;
};

class OSS_PUBLIC Ed25519OuterSignature   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString verifyingKey;
    typedef OssString signature;

    Ed25519OuterSignature();
    Ed25519OuterSignature(const Ed25519OuterSignature &);
    Ed25519OuterSignature(const verifyingKey &, const signature &);

    Ed25519OuterSignature & operator = (const Ed25519OuterSignature &);
    int operator == (const Ed25519OuterSignature &) const;
    int operator != (const Ed25519OuterSignature &) const;

    verifyingKey & get_verifyingKey();
    const verifyingKey & get_verifyingKey() const;
    void set_verifyingKey(const verifyingKey &);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);
private:
    verifyingKey verifyingKey_field;
    signature signature_field;
};

class OSS_PUBLIC OuterSignatureSchemes_Type : public OssConstrainedOpenType
{
public:
    OuterSignatureSchemes_Type();
    OuterSignatureSchemes_Type(const OuterSignatureSchemes_Type &);
    ~OuterSignatureSchemes_Type();
    OuterSignatureSchemes_Type & operator = (const OuterSignatureSchemes_Type &);
    int operator == (const OuterSignatureSchemes_Type &) const;
    int operator != (const OuterSignatureSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    Ed25519OuterSignature *get_Ed25519OuterSignature();
    const Ed25519OuterSignature *get_Ed25519OuterSignature() const;
    void set_Ed25519OuterSignature(const Ed25519OuterSignature &);
    Ed25519OuterSignature *release_Ed25519OuterSignature();
    void set_Ed25519OuterSignature(Ed25519OuterSignature *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq4   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef OuterSignatureSchemes_Type value;

    __seq4();
    __seq4(const __seq4 &);
    __seq4(const type_id &, const value &);

    __seq4 & operator = (const __seq4 &);
    int operator == (const __seq4 &) const;
    int operator != (const __seq4 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC WaveAttestation   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seq3 tbs;
    typedef __seq4 outerSignature;

    WaveAttestation();
    WaveAttestation(const WaveAttestation &);
    WaveAttestation(const tbs &, const outerSignature &);

    WaveAttestation & operator = (const WaveAttestation &);
    int operator == (const WaveAttestation &) const;
    int operator != (const WaveAttestation &) const;

    tbs & get_tbs();
    const tbs & get_tbs() const;
    void set_tbs(const tbs &);

    outerSignature & get_outerSignature();
    const outerSignature & get_outerSignature() const;
    void set_outerSignature(const outerSignature &);
private:
    tbs tbs_field;
    outerSignature outerSignature_field;
};

class OSS_PUBLIC __seqof4 : public OssList  /* SEQUENCE OF */
{
public:
    typedef EntityPublicKey component;

    __seqof4();
    __seqof4(const __seqof4 &);
    ~__seqof4();

    __seqof4 & operator = (const __seqof4 &);
    int operator == (const __seqof4 &) const;
    int operator != (const __seqof4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof4 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof4 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof4 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seq9   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EntityPublicKey verifyingKey;
    typedef __seqof4 keys;
    typedef __seq5 validity;
    typedef __seqof1 revocations;
    typedef __shared2 extensions;

    __seq9();
    __seq9(const __seq9 &);
    __seq9(const verifyingKey &, const keys &, const validity &, const revocations &, 
	const extensions &);

    __seq9 & operator = (const __seq9 &);
    int operator == (const __seq9 &) const;
    int operator != (const __seq9 &) const;

    verifyingKey & get_verifyingKey();
    const verifyingKey & get_verifyingKey() const;
    void set_verifyingKey(const verifyingKey &);

    keys & get_keys();
    const keys & get_keys() const;
    void set_keys(const keys &);

    validity & get_validity();
    const validity & get_validity() const;
    void set_validity(const validity &);

    revocations & get_revocations();
    const revocations & get_revocations() const;
    void set_revocations(const revocations &);

    extensions & get_extensions();
    const extensions & get_extensions() const;
    void set_extensions(const extensions &);
private:
    verifyingKey verifyingKey_field;
    keys keys_field;
    validity validity_field;
    revocations revocations_field;
    extensions extensions_field;
};

class OSS_PUBLIC WaveEntity   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seq9 tbs;
    typedef OssString signature;

    WaveEntity();
    WaveEntity(const WaveEntity &);
    WaveEntity(const tbs &, const signature &);

    WaveEntity & operator = (const WaveEntity &);
    int operator == (const WaveEntity &) const;
    int operator != (const WaveEntity &) const;

    tbs & get_tbs();
    const tbs & get_tbs() const;
    void set_tbs(const tbs &);

    signature & get_signature();
    const signature & get_signature() const;
    void set_signature(const signature &);
private:
    tbs tbs_field;
    signature signature_field;
};

class OSS_PUBLIC AttestationReference;

class OSS_PUBLIC __seqof11 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AttestationReference component;

    __seqof11();
    __seqof11(const __seqof11 &);
    ~__seqof11();

    __seqof11 & operator = (const __seqof11 &);
    int operator == (const __seqof11 &) const;
    int operator != (const __seqof11 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof11 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof11 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof11 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seqof12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef __shared4 component;

    __seqof12();
    __seqof12(const __seqof12 &);
    ~__seqof12();

    __seqof12 & operator = (const __seqof12 &);
    int operator == (const __seqof12 &) const;
    int operator != (const __seqof12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof12 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof12 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC WaveExplicitProof   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seqof11 attestations;
    typedef __seqof12 paths;
    typedef __shared3 entities;
    typedef __shared2 extensions;

    WaveExplicitProof();
    WaveExplicitProof(const WaveExplicitProof &);
    WaveExplicitProof(const attestations &, const paths &, const entities &, const extensions &);

    WaveExplicitProof & operator = (const WaveExplicitProof &);
    int operator == (const WaveExplicitProof &) const;
    int operator != (const WaveExplicitProof &) const;

    attestations & get_attestations();
    const attestations & get_attestations() const;
    void set_attestations(const attestations &);

    paths & get_paths();
    const paths & get_paths() const;
    void set_paths(const paths &);

    entities & get_entities();
    const entities & get_entities() const;
    void set_entities(const entities &);

    extensions & get_extensions();
    const extensions & get_extensions() const;
    void set_extensions(const extensions &);
private:
    attestations attestations_field;
    paths paths_field;
    entities entities_field;
    extensions extensions_field;
};

class OSS_PUBLIC EntityKeyringEntry;

class OSS_PUBLIC __seqof5 : public OssList  /* SEQUENCE OF */
{
public:
    typedef EntityKeyringEntry component;

    __seqof5();
    __seqof5(const __seqof5 &);
    ~__seqof5();

    __seqof5 & operator = (const __seqof5 &);
    int operator == (const __seqof5 &) const;
    int operator != (const __seqof5 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof5 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof5 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof5 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC EntityKeyring   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seqof5 keys;

    EntityKeyring();
    EntityKeyring(const EntityKeyring &);
    EntityKeyring(const keys &);

    EntityKeyring & operator = (const EntityKeyring &);
    int operator == (const EntityKeyring &) const;
    int operator != (const EntityKeyring &) const;

    keys & get_keys();
    const keys & get_keys() const;
    void set_keys(const keys &);
private:
    keys keys_field;
};

class OSS_PUBLIC KeyringAESCiphertext   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString ciphertext;
    typedef OssString salt;
    typedef OSS_INT32 iterations;

    KeyringAESCiphertext();
    KeyringAESCiphertext(const KeyringAESCiphertext &);
    KeyringAESCiphertext(const ciphertext &, const salt &, iterations);

    KeyringAESCiphertext & operator = (const KeyringAESCiphertext &);
    int operator == (const KeyringAESCiphertext &) const;
    int operator != (const KeyringAESCiphertext &) const;

    ciphertext & get_ciphertext();
    const ciphertext & get_ciphertext() const;
    void set_ciphertext(const ciphertext &);

    salt & get_salt();
    const salt & get_salt() const;
    void set_salt(const salt &);

    iterations & get_iterations();
    iterations get_iterations() const;
    void set_iterations(iterations);
private:
    ciphertext ciphertext_field;
    salt salt_field;
    iterations iterations_field;
};

class OSS_PUBLIC EntityKeyringSchemes_Type : public OssConstrainedOpenType
{
public:
    EntityKeyringSchemes_Type();
    EntityKeyringSchemes_Type(const EntityKeyringSchemes_Type &);
    ~EntityKeyringSchemes_Type();
    EntityKeyringSchemes_Type & operator = (const EntityKeyringSchemes_Type &);
    int operator == (const EntityKeyringSchemes_Type &) const;
    int operator != (const EntityKeyringSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    EntityKeyring *get_EntityKeyring();
    const EntityKeyring *get_EntityKeyring() const;
    void set_EntityKeyring(const EntityKeyring &);
    EntityKeyring *release_EntityKeyring();
    void set_EntityKeyring(EntityKeyring *);

    KeyringAESCiphertext *get_KeyringAESCiphertext();
    const KeyringAESCiphertext *get_KeyringAESCiphertext() const;
    void set_KeyringAESCiphertext(const KeyringAESCiphertext &);
    KeyringAESCiphertext *release_KeyringAESCiphertext();
    void set_KeyringAESCiphertext(KeyringAESCiphertext *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq10   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef EntityKeyringSchemes_Type value;

    __seq10();
    __seq10(const __seq10 &);
    __seq10(const type_id &, const value &);

    __seq10 & operator = (const __seq10 &);
    int operator == (const __seq10 &) const;
    int operator != (const __seq10 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC WaveEntitySecret   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef WaveEntity entity;
    typedef __seq10 keyring;

    WaveEntitySecret();
    WaveEntitySecret(const WaveEntitySecret &);
    WaveEntitySecret(const entity &, const keyring &);

    WaveEntitySecret & operator = (const WaveEntitySecret &);
    int operator == (const WaveEntitySecret &) const;
    int operator != (const WaveEntitySecret &) const;

    entity & get_entity();
    const entity & get_entity() const;
    void set_entity(const entity &);

    keyring & get_keyring();
    const keyring & get_keyring() const;
    void set_keyring(const keyring &);
private:
    entity entity_field;
    keyring keyring_field;
};

class OSS_PUBLIC WaveObjects_Type : public OssConstrainedOpenType
{
public:
    WaveObjects_Type();
    WaveObjects_Type(const WaveObjects_Type &);
    ~WaveObjects_Type();
    WaveObjects_Type & operator = (const WaveObjects_Type &);
    int operator == (const WaveObjects_Type &) const;
    int operator != (const WaveObjects_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    WaveAttestation *get_WaveAttestation();
    const WaveAttestation *get_WaveAttestation() const;
    void set_WaveAttestation(const WaveAttestation &);
    WaveAttestation *release_WaveAttestation();
    void set_WaveAttestation(WaveAttestation *);

    WaveEntity *get_WaveEntity();
    const WaveEntity *get_WaveEntity() const;
    void set_WaveEntity(const WaveEntity &);
    WaveEntity *release_WaveEntity();
    void set_WaveEntity(WaveEntity *);

    WaveExplicitProof *get_WaveExplicitProof();
    const WaveExplicitProof *get_WaveExplicitProof() const;
    void set_WaveExplicitProof(const WaveExplicitProof &);
    WaveExplicitProof *release_WaveExplicitProof();
    void set_WaveExplicitProof(WaveExplicitProof *);

    WaveEntitySecret *get_WaveEntitySecret();
    const WaveEntitySecret *get_WaveEntitySecret() const;
    void set_WaveEntitySecret(const WaveEntitySecret &);
    WaveEntitySecret *release_WaveEntitySecret();
    void set_WaveEntitySecret(WaveEntitySecret *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC WaveWireObject   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef WaveObjects_Type value;

    WaveWireObject();
    WaveWireObject(const WaveWireObject &);
    WaveWireObject(const type_id &, const value &);

    WaveWireObject & operator = (const WaveWireObject &);
    int operator == (const WaveWireObject &) const;
    int operator != (const WaveWireObject &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC CommitmentRevocationOption   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 hash;
    typedef Location location;

    CommitmentRevocationOption();
    CommitmentRevocationOption(const CommitmentRevocationOption &);
    CommitmentRevocationOption(const hash &, const location &);

    CommitmentRevocationOption & operator = (const CommitmentRevocationOption &);
    int operator == (const CommitmentRevocationOption &) const;
    int operator != (const CommitmentRevocationOption &) const;

    hash & get_hash();
    const hash & get_hash() const;
    void set_hash(const hash &);

    location & get_location();
    const location & get_location() const;
    void set_location(const location &);
private:
    hash hash_field;
    location location_field;
};

class OSS_PUBLIC RevocationSchemes_Type : public OssConstrainedOpenType
{
public:
    RevocationSchemes_Type();
    RevocationSchemes_Type(const RevocationSchemes_Type &);
    ~RevocationSchemes_Type();
    RevocationSchemes_Type & operator = (const RevocationSchemes_Type &);
    int operator == (const RevocationSchemes_Type &) const;
    int operator != (const RevocationSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    CommitmentRevocationOption *get_CommitmentRevocationOption();
    const CommitmentRevocationOption *get_CommitmentRevocationOption() const;
    void set_CommitmentRevocationOption(const CommitmentRevocationOption &);
    CommitmentRevocationOption *release_CommitmentRevocationOption();
    void set_CommitmentRevocationOption(CommitmentRevocationOption *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC __seq1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef RevocationSchemes_Type value;

    __seq1();
    __seq1(const __seq1 &);
    __seq1(const type_id &, const value &);

    __seq1 & operator = (const __seq1 &);
    int operator == (const __seq1 &) const;
    int operator != (const __seq1 &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC RevocationOption   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef ossBoolean critical;
    typedef __seq1 scheme;

    RevocationOption();
    RevocationOption(const RevocationOption &);
    RevocationOption(critical, const scheme &);

    RevocationOption & operator = (const RevocationOption &);
    int operator == (const RevocationOption &) const;
    int operator != (const RevocationOption &) const;

    critical & get_critical();
    critical get_critical() const;
    void set_critical(critical);

    scheme & get_scheme();
    const scheme & get_scheme() const;
    void set_scheme(const scheme &);
private:
    critical critical_field;
    scheme scheme_field;
};

class OSS_PUBLIC Extension   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID extnID;
    typedef ossBoolean critical;
    typedef OssString value;

    Extension();
    Extension(const Extension &);
    Extension(const extnID &, critical, const value &);

    Extension & operator = (const Extension &);
    int operator == (const Extension &) const;
    int operator != (const Extension &) const;

    extnID & get_extnID();
    const extnID & get_extnID() const;
    void set_extnID(const extnID &);

    critical & get_critical();
    critical get_critical() const;
    void set_critical(critical);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    extnID extnID_field;
    critical critical_field;
    value value_field;
};

class OSS_PUBLIC EntitySecretKeySchemes_Type : public OssConstrainedOpenType
{
public:
    EntitySecretKeySchemes_Type();
    EntitySecretKeySchemes_Type(const EntitySecretKeySchemes_Type &);
    ~EntitySecretKeySchemes_Type();
    EntitySecretKeySchemes_Type & operator = (const EntitySecretKeySchemes_Type &);
    int operator == (const EntitySecretKeySchemes_Type &) const;
    int operator != (const EntitySecretKeySchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    Private_Ed25519 *get_Private_Ed25519();
    const Private_Ed25519 *get_Private_Ed25519() const;
    void set_Private_Ed25519(const Private_Ed25519 &);
    Private_Ed25519 *release_Private_Ed25519();
    void set_Private_Ed25519(Private_Ed25519 *);

    Private_Curve25519 *get_Private_Curve25519();
    const Private_Curve25519 *get_Private_Curve25519() const;
    void set_Private_Curve25519(const Private_Curve25519 &);
    Private_Curve25519 *release_Private_Curve25519();
    void set_Private_Curve25519(Private_Curve25519 *);

    Private_BN256_OAQUE *get_Private_BN256_OAQUE();
    const Private_BN256_OAQUE *get_Private_BN256_OAQUE() const;
    void set_Private_BN256_OAQUE(const Private_BN256_OAQUE &);
    Private_BN256_OAQUE *release_Private_BN256_OAQUE();
    void set_Private_BN256_OAQUE(Private_BN256_OAQUE *);

    Master_BN256_OAQUE *get_Master_BN256_OAQUE();
    const Master_BN256_OAQUE *get_Master_BN256_OAQUE() const;
    void set_Master_BN256_OAQUE(const Master_BN256_OAQUE &);
    Master_BN256_OAQUE *release_Master_BN256_OAQUE();
    void set_Master_BN256_OAQUE(Master_BN256_OAQUE *);

    Master_BN256_IBE *get_Master_BN256_IBE();
    const Master_BN256_IBE *get_Master_BN256_IBE() const;
    void set_Master_BN256_IBE(const Master_BN256_IBE &);
    Master_BN256_IBE *release_Master_BN256_IBE();
    void set_Master_BN256_IBE(Master_BN256_IBE *);

    Private_BN256_IBE *get_Private_BN256_IBE();
    const Private_BN256_IBE *get_Private_BN256_IBE() const;
    void set_Private_BN256_IBE(const Private_BN256_IBE &);
    Private_BN256_IBE *release_Private_BN256_IBE();
    void set_Private_BN256_IBE(Private_BN256_IBE *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC EntityPrivateKey   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef EntitySecretKeySchemes_Type value;

    EntityPrivateKey();
    EntityPrivateKey(const EntityPrivateKey &);
    EntityPrivateKey(const type_id &, const value &);

    EntityPrivateKey & operator = (const EntityPrivateKey &);
    int operator == (const EntityPrivateKey &) const;
    int operator != (const EntityPrivateKey &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC EntityKeyringEntry   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef EntityPublicKey EntityKeyringEntry_public;
    typedef EntityPrivateKey secret;

    EntityKeyringEntry();
    EntityKeyringEntry(const EntityKeyringEntry &);
    EntityKeyringEntry(const EntityKeyringEntry_public &, const secret &);

    EntityKeyringEntry & operator = (const EntityKeyringEntry &);
    int operator == (const EntityKeyringEntry &) const;
    int operator != (const EntityKeyringEntry &) const;

    EntityKeyringEntry_public & get_EntityKeyringEntry_public();
    const EntityKeyringEntry_public & get_EntityKeyringEntry_public() const;
    void set_EntityKeyringEntry_public(const EntityKeyringEntry_public &);

    secret & get_secret();
    const secret & get_secret() const;
    void set_secret(const secret &);
private:
    EntityKeyringEntry_public EntityKeyringEntry_public_field;
    secret secret_field;
};

class OSS_PUBLIC PolicyAddendumSchemes_Type : public OssConstrainedOpenType
{
public:
    PolicyAddendumSchemes_Type();
    PolicyAddendumSchemes_Type(const PolicyAddendumSchemes_Type &);
    ~PolicyAddendumSchemes_Type();
    PolicyAddendumSchemes_Type & operator = (const PolicyAddendumSchemes_Type &);
    int operator == (const PolicyAddendumSchemes_Type &) const;
    int operator != (const PolicyAddendumSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    EntityKeyringEntry *get_EntityKeyringEntry();
    const EntityKeyringEntry *get_EntityKeyringEntry() const;
    void set_EntityKeyringEntry(const EntityKeyringEntry &);
    EntityKeyringEntry *release_EntityKeyringEntry();
    void set_EntityKeyringEntry(EntityKeyringEntry *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC PolicyAddendum   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef PolicyAddendumSchemes_Type value;

    PolicyAddendum();
    PolicyAddendum(const PolicyAddendum &);
    PolicyAddendum(const type_id &, const value &);

    PolicyAddendum & operator = (const PolicyAddendum &);
    int operator == (const PolicyAddendum &) const;
    int operator != (const PolicyAddendum &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

typedef OSS_INT32 Capability;

typedef __shared1 AttestationHash;

class OSS_PUBLIC AttestationVerifierKeySchemes_Type : public OssConstrainedOpenType
{
public:
    AttestationVerifierKeySchemes_Type();
    AttestationVerifierKeySchemes_Type(const AttestationVerifierKeySchemes_Type &);
    ~AttestationVerifierKeySchemes_Type();
    AttestationVerifierKeySchemes_Type & operator = (const AttestationVerifierKeySchemes_Type &);
    int operator == (const AttestationVerifierKeySchemes_Type &) const;
    int operator != (const AttestationVerifierKeySchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);

    AVKeyAES128_GCM *get_AVKeyAES128_GCM();
    const AVKeyAES128_GCM *get_AVKeyAES128_GCM() const;
    void set_AVKeyAES128_GCM(const AVKeyAES128_GCM &);
    AVKeyAES128_GCM *release_AVKeyAES128_GCM();
    void set_AVKeyAES128_GCM(AVKeyAES128_GCM *);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC AttestationVerifierKey   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef AttestationVerifierKeySchemes_Type value;

    AttestationVerifierKey();
    AttestationVerifierKey(const AttestationVerifierKey &);
    AttestationVerifierKey(const type_id &, const value &);

    AttestationVerifierKey & operator = (const AttestationVerifierKey &);
    int operator == (const AttestationVerifierKey &) const;
    int operator != (const AttestationVerifierKey &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC RevocationCheckSchemes_Type : public OssConstrainedOpenType
{
public:
    RevocationCheckSchemes_Type();
    RevocationCheckSchemes_Type(const RevocationCheckSchemes_Type &);
    ~RevocationCheckSchemes_Type();
    RevocationCheckSchemes_Type & operator = (const RevocationCheckSchemes_Type &);
    int operator == (const RevocationCheckSchemes_Type &) const;
    int operator != (const RevocationCheckSchemes_Type &) const;
    int set_decoded(PDU &);
    int grab_decoded(PDU &);
    int set_encoded(const EncodedBuffer &);
    int grab_encoded(EncodedBuffer &);
    int encode(OssControl &);
private:
    void cleanup_decoded();
};

class OSS_PUBLIC RevocationCheck   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssEncOID type_id;
    typedef RevocationCheckSchemes_Type value;

    RevocationCheck();
    RevocationCheck(const RevocationCheck &);
    RevocationCheck(const type_id &, const value &);

    RevocationCheck & operator = (const RevocationCheck &);
    int operator == (const RevocationCheck &) const;
    int operator != (const RevocationCheck &) const;

    type_id & get_type_id();
    const type_id & get_type_id() const;
    void set_type_id(const type_id &);

    value & get_value();
    const value & get_value() const;
    void set_value(const value &);
private:
    type_id type_id_field;
    value value_field;
};

class OSS_PUBLIC __seqof6 : public OssList  /* SEQUENCE OF */
{
public:
    typedef Location component;

    __seqof6();
    __seqof6(const __seqof6 &);
    ~__seqof6();

    __seqof6 & operator = (const __seqof6 &);
    int operator == (const __seqof6 &) const;
    int operator != (const __seqof6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof6 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof6 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seqof7 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AttestationVerifierKey component;

    __seqof7();
    __seqof7(const __seqof7 &);
    ~__seqof7();

    __seqof7 & operator = (const __seqof7 &);
    int operator == (const __seqof7 &) const;
    int operator != (const __seqof7 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof7 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof7 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof7 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __seqof8 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RevocationCheck component;

    __seqof8();
    __seqof8(const __seqof8 &);
    ~__seqof8();

    __seqof8 & operator = (const __seqof8 &);
    int operator == (const __seqof8 &) const;
    int operator != (const __seqof8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof8 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof8 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof8 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC AttestationReference   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 hash;
    typedef OssString content;
    typedef __seqof6 location;
    typedef __seqof7 keys;
    typedef __seqof8 revocationChecks;
    typedef __shared2 extensions;

    AttestationReference();
    AttestationReference(const AttestationReference &);
    AttestationReference(const hash &, const content &, const location &, const keys &, 
	const revocationChecks &, const extensions &);
    AttestationReference(const hash &, const location &, const keys &, const revocationChecks &, 
	const extensions &);

    AttestationReference & operator = (const AttestationReference &);
    int operator == (const AttestationReference &) const;
    int operator != (const AttestationReference &) const;

    hash & get_hash();
    const hash & get_hash() const;
    void set_hash(const hash &);

    content *get_content();
    const content *get_content() const;
    void set_content(const content &);
    int content_is_present() const;
    void omit_content();

    location & get_location();
    const location & get_location() const;
    void set_location(const location &);

    keys & get_keys();
    const keys & get_keys() const;
    void set_keys(const keys &);

    revocationChecks & get_revocationChecks();
    const revocationChecks & get_revocationChecks() const;
    void set_revocationChecks(const revocationChecks &);

    extensions & get_extensions();
    const extensions & get_extensions() const;
    void set_extensions(const extensions &);
private:
    OSS_UINT32 bit_mask;
    hash hash_field;
    content content_field;
    location location_field;
    keys keys_field;
    revocationChecks revocationChecks_field;
    extensions extensions_field;
};

class OSS_PUBLIC RTreeStatement   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 permissionSet;
    typedef __shared3 permissions;
    typedef OssString resource;
    typedef OssString comment;

    RTreeStatement();
    RTreeStatement(const RTreeStatement &);
    RTreeStatement(const permissionSet &, const permissions &, const resource &, 
	const comment &);
    RTreeStatement(const permissionSet &, const permissions &, const resource &);

    RTreeStatement & operator = (const RTreeStatement &);
    int operator == (const RTreeStatement &) const;
    int operator != (const RTreeStatement &) const;

    permissionSet & get_permissionSet();
    const permissionSet & get_permissionSet() const;
    void set_permissionSet(const permissionSet &);

    permissions & get_permissions();
    const permissions & get_permissions() const;
    void set_permissions(const permissions &);

    resource & get_resource();
    const resource & get_resource() const;
    void set_resource(const resource &);

    comment *get_comment();
    const comment *get_comment() const;
    void set_comment(const comment &);
    int comment_is_present() const;
    void omit_comment();
private:
    OSS_UINT32 bit_mask;
    permissionSet permissionSet_field;
    permissions permissions_field;
    resource resource_field;
    comment comment_field;
};

class OSS_PUBLIC WR1Envelope   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString bodyKeys_oaque;
    typedef __shared3 partition;

    WR1Envelope();
    WR1Envelope(const WR1Envelope &);
    WR1Envelope(const bodyKeys_oaque &, const partition &);

    WR1Envelope & operator = (const WR1Envelope &);
    int operator == (const WR1Envelope &) const;
    int operator != (const WR1Envelope &) const;

    bodyKeys_oaque & get_bodyKeys_oaque();
    const bodyKeys_oaque & get_bodyKeys_oaque() const;
    void set_bodyKeys_oaque(const bodyKeys_oaque &);

    partition & get_partition();
    const partition & get_partition() const;
    void set_partition(const partition &);
private:
    bodyKeys_oaque bodyKeys_oaque_field;
    partition partition_field;
};

class OSS_PUBLIC WR1ProverBody   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __seqof3 addendums;
    typedef __shared2 extensions;

    WR1ProverBody();
    WR1ProverBody(const WR1ProverBody &);
    WR1ProverBody(const addendums &, const extensions &);

    WR1ProverBody & operator = (const WR1ProverBody &);
    int operator == (const WR1ProverBody &) const;
    int operator != (const WR1ProverBody &) const;

    addendums & get_addendums();
    const addendums & get_addendums() const;
    void set_addendums(const addendums &);

    extensions & get_extensions();
    const extensions & get_extensions() const;
    void set_extensions(const extensions &);
private:
    addendums addendums_field;
    extensions extensions_field;
};

class OSS_PUBLIC WR1VerifierBody   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef AttestationVerifierBody attestationVerifierBody;

    WR1VerifierBody();
    WR1VerifierBody(const WR1VerifierBody &);
    WR1VerifierBody(const attestationVerifierBody &);

    WR1VerifierBody & operator = (const WR1VerifierBody &);
    int operator == (const WR1VerifierBody &) const;
    int operator != (const WR1VerifierBody &) const;

    attestationVerifierBody & get_attestationVerifierBody();
    const attestationVerifierBody & get_attestationVerifierBody() const;
    void set_attestationVerifierBody(const attestationVerifierBody &);
private:
    attestationVerifierBody attestationVerifierBody_field;
};

/* Universal PDU class */

class OSS_PUBLIC objects_PDU : public UniversalPDU {
public:
    objects_PDU();
    void set_WaveWireObject(WaveWireObject &);
    WaveWireObject *get_WaveWireObject() const;
    void set_WaveAttestation(WaveAttestation &);
    WaveAttestation *get_WaveAttestation() const;
    void set_AttestationBody(AttestationBody &);
    AttestationBody *get_AttestationBody() const;
    void set_WaveEntity(WaveEntity &);
    WaveEntity *get_WaveEntity() const;
    void set_WaveEntitySecret(WaveEntitySecret &);
    WaveEntitySecret *get_WaveEntitySecret() const;
    void set_EntityKeyring(EntityKeyring &);
    EntityKeyring *get_EntityKeyring() const;
    void set_EntityKeyringEntry(EntityKeyringEntry &);
    EntityKeyringEntry *get_EntityKeyringEntry() const;
    void set_WaveExplicitProof(WaveExplicitProof &);
    WaveExplicitProof *get_WaveExplicitProof() const;
    void set_RTreePolicy(RTreePolicy &);
    RTreePolicy *get_RTreePolicy() const;
    void set_HashSha3_256(HashSha3_256 &);
    HashSha3_256 *get_HashSha3_256() const;
    void set_HashSha_256(HashSha_256 &);
    HashSha_256 *get_HashSha_256() const;
    void set_HashKeccak_256(HashKeccak_256 &);
    HashKeccak_256 *get_HashKeccak_256() const;
    void set_LocationURL(LocationURL &);
    LocationURL *get_LocationURL() const;
    void set_LocationEthereum(LocationEthereum &);
    LocationEthereum *get_LocationEthereum() const;
    void set_PSKBodyCiphertext(PSKBodyCiphertext &);
    PSKBodyCiphertext *get_PSKBodyCiphertext() const;
    void set_WR1BodyCiphertext(WR1BodyCiphertext &);
    WR1BodyCiphertext *get_WR1BodyCiphertext() const;
    void set_WR1Envelope(WR1Envelope &);
    WR1Envelope *get_WR1Envelope() const;
    void set_WR1ProverBody(WR1ProverBody &);
    WR1ProverBody *get_WR1ProverBody() const;
    void set_WR1VerifierBody(WR1VerifierBody &);
    WR1VerifierBody *get_WR1VerifierBody() const;
    void set_Ed25519OuterSignature(Ed25519OuterSignature &);
    Ed25519OuterSignature *get_Ed25519OuterSignature() const;
    void set_SignedOuterKey(SignedOuterKey &);
    SignedOuterKey *get_SignedOuterKey() const;
    void set_TrustLevel(TrustLevel &);
    TrustLevel *get_TrustLevel() const;
    void set_CommitmentRevocationOption(CommitmentRevocationOption &);
    CommitmentRevocationOption *get_CommitmentRevocationOption() const;
    void set_AVKeyAES128_GCM(AVKeyAES128_GCM &);
    AVKeyAES128_GCM *get_AVKeyAES128_GCM() const;
    void set_Private_Ed25519(Private_Ed25519 &);
    Private_Ed25519 *get_Private_Ed25519() const;
    void set_Private_Curve25519(Private_Curve25519 &);
    Private_Curve25519 *get_Private_Curve25519() const;
    void set_Private_BN256_OAQUE(Private_BN256_OAQUE &);
    Private_BN256_OAQUE *get_Private_BN256_OAQUE() const;
    void set_Private_BN256_IBE(Private_BN256_IBE &);
    Private_BN256_IBE *get_Private_BN256_IBE() const;
    void set_Master_BN256_OAQUE(Master_BN256_OAQUE &);
    Master_BN256_OAQUE *get_Master_BN256_OAQUE() const;
    void set_Master_BN256_IBE(Master_BN256_IBE &);
    Master_BN256_IBE *get_Master_BN256_IBE() const;
    void set_Public_Ed25519(Public_Ed25519 &);
    Public_Ed25519 *get_Public_Ed25519() const;
    void set_Public_Curve25519(Public_Curve25519 &);
    Public_Curve25519 *get_Public_Curve25519() const;
    void set_Public_OAQUE(Public_OAQUE &);
    Public_OAQUE *get_Public_OAQUE() const;
    void set_Params_BN256_OAQUE(Params_BN256_OAQUE &);
    Params_BN256_OAQUE *get_Params_BN256_OAQUE() const;
    void set_Params_BN256_IBE(Params_BN256_IBE &);
    Params_BN256_IBE *get_Params_BN256_IBE() const;
    void set_Public_BN256_IBE(Public_BN256_IBE &);
    Public_BN256_IBE *get_Public_BN256_IBE() const;
    void set_KeyringAESCiphertext(KeyringAESCiphertext &);
    KeyringAESCiphertext *get_KeyringAESCiphertext() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_WaveWireObject(const WaveWireObject &);
    const WaveWireObject *get_const_WaveWireObject() const;
    void set_const_WaveAttestation(const WaveAttestation &);
    const WaveAttestation *get_const_WaveAttestation() const;
    void set_const_AttestationBody(const AttestationBody &);
    const AttestationBody *get_const_AttestationBody() const;
    void set_const_WaveEntity(const WaveEntity &);
    const WaveEntity *get_const_WaveEntity() const;
    void set_const_WaveEntitySecret(const WaveEntitySecret &);
    const WaveEntitySecret *get_const_WaveEntitySecret() const;
    void set_const_EntityKeyring(const EntityKeyring &);
    const EntityKeyring *get_const_EntityKeyring() const;
    void set_const_EntityKeyringEntry(const EntityKeyringEntry &);
    const EntityKeyringEntry *get_const_EntityKeyringEntry() const;
    void set_const_WaveExplicitProof(const WaveExplicitProof &);
    const WaveExplicitProof *get_const_WaveExplicitProof() const;
    void set_const_RTreePolicy(const RTreePolicy &);
    const RTreePolicy *get_const_RTreePolicy() const;
    void set_const_HashSha3_256(const HashSha3_256 &);
    const HashSha3_256 *get_const_HashSha3_256() const;
    void set_const_HashSha_256(const HashSha_256 &);
    const HashSha_256 *get_const_HashSha_256() const;
    void set_const_HashKeccak_256(const HashKeccak_256 &);
    const HashKeccak_256 *get_const_HashKeccak_256() const;
    void set_const_LocationURL(const LocationURL &);
    const LocationURL *get_const_LocationURL() const;
    void set_const_LocationEthereum(const LocationEthereum &);
    const LocationEthereum *get_const_LocationEthereum() const;
    void set_const_PSKBodyCiphertext(const PSKBodyCiphertext &);
    const PSKBodyCiphertext *get_const_PSKBodyCiphertext() const;
    void set_const_WR1BodyCiphertext(const WR1BodyCiphertext &);
    const WR1BodyCiphertext *get_const_WR1BodyCiphertext() const;
    void set_const_WR1Envelope(const WR1Envelope &);
    const WR1Envelope *get_const_WR1Envelope() const;
    void set_const_WR1ProverBody(const WR1ProverBody &);
    const WR1ProverBody *get_const_WR1ProverBody() const;
    void set_const_WR1VerifierBody(const WR1VerifierBody &);
    const WR1VerifierBody *get_const_WR1VerifierBody() const;
    void set_const_Ed25519OuterSignature(const Ed25519OuterSignature &);
    const Ed25519OuterSignature *get_const_Ed25519OuterSignature() const;
    void set_const_SignedOuterKey(const SignedOuterKey &);
    const SignedOuterKey *get_const_SignedOuterKey() const;
    void set_const_TrustLevel(const TrustLevel &);
    const TrustLevel *get_const_TrustLevel() const;
    void set_const_CommitmentRevocationOption(const CommitmentRevocationOption &);
    const CommitmentRevocationOption *get_const_CommitmentRevocationOption() const;
    void set_const_AVKeyAES128_GCM(const AVKeyAES128_GCM &);
    const AVKeyAES128_GCM *get_const_AVKeyAES128_GCM() const;
    void set_const_Private_Ed25519(const Private_Ed25519 &);
    const Private_Ed25519 *get_const_Private_Ed25519() const;
    void set_const_Private_Curve25519(const Private_Curve25519 &);
    const Private_Curve25519 *get_const_Private_Curve25519() const;
    void set_const_Private_BN256_OAQUE(const Private_BN256_OAQUE &);
    const Private_BN256_OAQUE *get_const_Private_BN256_OAQUE() const;
    void set_const_Private_BN256_IBE(const Private_BN256_IBE &);
    const Private_BN256_IBE *get_const_Private_BN256_IBE() const;
    void set_const_Master_BN256_OAQUE(const Master_BN256_OAQUE &);
    const Master_BN256_OAQUE *get_const_Master_BN256_OAQUE() const;
    void set_const_Master_BN256_IBE(const Master_BN256_IBE &);
    const Master_BN256_IBE *get_const_Master_BN256_IBE() const;
    void set_const_Public_Ed25519(const Public_Ed25519 &);
    const Public_Ed25519 *get_const_Public_Ed25519() const;
    void set_const_Public_Curve25519(const Public_Curve25519 &);
    const Public_Curve25519 *get_const_Public_Curve25519() const;
    void set_const_Public_OAQUE(const Public_OAQUE &);
    const Public_OAQUE *get_const_Public_OAQUE() const;
    void set_const_Params_BN256_OAQUE(const Params_BN256_OAQUE &);
    const Params_BN256_OAQUE *get_const_Params_BN256_OAQUE() const;
    void set_const_Params_BN256_IBE(const Params_BN256_IBE &);
    const Params_BN256_IBE *get_const_Params_BN256_IBE() const;
    void set_const_Public_BN256_IBE(const Public_BN256_IBE &);
    const Public_BN256_IBE *get_const_Public_BN256_IBE() const;
    void set_const_KeyringAESCiphertext(const KeyringAESCiphertext &);
    const KeyringAESCiphertext *get_const_KeyringAESCiphertext() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC WaveWireObject_PDU : public ConcretePDU {
public:
    WaveWireObject_PDU();
    void set_data(WaveWireObject &);
    WaveWireObject *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaveWireObject & d);
    const WaveWireObject *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WaveAttestation_PDU : public ConcretePDU {
public:
    WaveAttestation_PDU();
    void set_data(WaveAttestation &);
    WaveAttestation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaveAttestation & d);
    const WaveAttestation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttestationBody_PDU : public ConcretePDU {
public:
    AttestationBody_PDU();
    void set_data(AttestationBody &);
    AttestationBody *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttestationBody & d);
    const AttestationBody *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WaveEntity_PDU : public ConcretePDU {
public:
    WaveEntity_PDU();
    void set_data(WaveEntity &);
    WaveEntity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaveEntity & d);
    const WaveEntity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WaveEntitySecret_PDU : public ConcretePDU {
public:
    WaveEntitySecret_PDU();
    void set_data(WaveEntitySecret &);
    WaveEntitySecret *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaveEntitySecret & d);
    const WaveEntitySecret *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EntityKeyring_PDU : public ConcretePDU {
public:
    EntityKeyring_PDU();
    void set_data(EntityKeyring &);
    EntityKeyring *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EntityKeyring & d);
    const EntityKeyring *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EntityKeyringEntry_PDU : public ConcretePDU {
public:
    EntityKeyringEntry_PDU();
    void set_data(EntityKeyringEntry &);
    EntityKeyringEntry *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EntityKeyringEntry & d);
    const EntityKeyringEntry *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WaveExplicitProof_PDU : public ConcretePDU {
public:
    WaveExplicitProof_PDU();
    void set_data(WaveExplicitProof &);
    WaveExplicitProof *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaveExplicitProof & d);
    const WaveExplicitProof *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RTreePolicy_PDU : public ConcretePDU {
public:
    RTreePolicy_PDU();
    void set_data(RTreePolicy &);
    RTreePolicy *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RTreePolicy & d);
    const RTreePolicy *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HashSha3_256_PDU : public ConcretePDU {
public:
    HashSha3_256_PDU();
    void set_data(HashSha3_256 &);
    HashSha3_256 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HashSha3_256 & d);
    const HashSha3_256 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HashSha_256_PDU : public ConcretePDU {
public:
    HashSha_256_PDU();
    void set_data(HashSha_256 &);
    HashSha_256 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HashSha_256 & d);
    const HashSha_256 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HashKeccak_256_PDU : public ConcretePDU {
public:
    HashKeccak_256_PDU();
    void set_data(HashKeccak_256 &);
    HashKeccak_256 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HashKeccak_256 & d);
    const HashKeccak_256 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LocationURL_PDU : public ConcretePDU {
public:
    LocationURL_PDU();
    void set_data(LocationURL &);
    LocationURL *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LocationURL & d);
    const LocationURL *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LocationEthereum_PDU : public ConcretePDU {
public:
    LocationEthereum_PDU();
    void set_data(LocationEthereum &);
    LocationEthereum *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LocationEthereum & d);
    const LocationEthereum *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PSKBodyCiphertext_PDU : public ConcretePDU {
public:
    PSKBodyCiphertext_PDU();
    void set_data(PSKBodyCiphertext &);
    PSKBodyCiphertext *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PSKBodyCiphertext & d);
    const PSKBodyCiphertext *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WR1BodyCiphertext_PDU : public ConcretePDU {
public:
    WR1BodyCiphertext_PDU();
    void set_data(WR1BodyCiphertext &);
    WR1BodyCiphertext *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WR1BodyCiphertext & d);
    const WR1BodyCiphertext *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WR1Envelope_PDU : public ConcretePDU {
public:
    WR1Envelope_PDU();
    void set_data(WR1Envelope &);
    WR1Envelope *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WR1Envelope & d);
    const WR1Envelope *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WR1ProverBody_PDU : public ConcretePDU {
public:
    WR1ProverBody_PDU();
    void set_data(WR1ProverBody &);
    WR1ProverBody *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WR1ProverBody & d);
    const WR1ProverBody *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WR1VerifierBody_PDU : public ConcretePDU {
public:
    WR1VerifierBody_PDU();
    void set_data(WR1VerifierBody &);
    WR1VerifierBody *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WR1VerifierBody & d);
    const WR1VerifierBody *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Ed25519OuterSignature_PDU : public ConcretePDU {
public:
    Ed25519OuterSignature_PDU();
    void set_data(Ed25519OuterSignature &);
    Ed25519OuterSignature *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Ed25519OuterSignature & d);
    const Ed25519OuterSignature *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SignedOuterKey_PDU : public ConcretePDU {
public:
    SignedOuterKey_PDU();
    void set_data(SignedOuterKey &);
    SignedOuterKey *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SignedOuterKey & d);
    const SignedOuterKey *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TrustLevel_PDU : public ConcretePDU {
public:
    TrustLevel_PDU();
    void set_data(TrustLevel &);
    TrustLevel *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TrustLevel & d);
    const TrustLevel *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CommitmentRevocationOption_PDU : public ConcretePDU {
public:
    CommitmentRevocationOption_PDU();
    void set_data(CommitmentRevocationOption &);
    CommitmentRevocationOption *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CommitmentRevocationOption & d);
    const CommitmentRevocationOption *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AVKeyAES128_GCM_PDU : public ConcretePDU {
public:
    AVKeyAES128_GCM_PDU();
    void set_data(AVKeyAES128_GCM &);
    AVKeyAES128_GCM *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AVKeyAES128_GCM & d);
    const AVKeyAES128_GCM *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Private_Ed25519_PDU : public ConcretePDU {
public:
    Private_Ed25519_PDU();
    void set_data(Private_Ed25519 &);
    Private_Ed25519 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Private_Ed25519 & d);
    const Private_Ed25519 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Private_Curve25519_PDU : public ConcretePDU {
public:
    Private_Curve25519_PDU();
    void set_data(Private_Curve25519 &);
    Private_Curve25519 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Private_Curve25519 & d);
    const Private_Curve25519 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Private_BN256_OAQUE_PDU : public ConcretePDU {
public:
    Private_BN256_OAQUE_PDU();
    void set_data(Private_BN256_OAQUE &);
    Private_BN256_OAQUE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Private_BN256_OAQUE & d);
    const Private_BN256_OAQUE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Private_BN256_IBE_PDU : public ConcretePDU {
public:
    Private_BN256_IBE_PDU();
    void set_data(Private_BN256_IBE &);
    Private_BN256_IBE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Private_BN256_IBE & d);
    const Private_BN256_IBE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Master_BN256_OAQUE_PDU : public ConcretePDU {
public:
    Master_BN256_OAQUE_PDU();
    void set_data(Master_BN256_OAQUE &);
    Master_BN256_OAQUE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Master_BN256_OAQUE & d);
    const Master_BN256_OAQUE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Master_BN256_IBE_PDU : public ConcretePDU {
public:
    Master_BN256_IBE_PDU();
    void set_data(Master_BN256_IBE &);
    Master_BN256_IBE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Master_BN256_IBE & d);
    const Master_BN256_IBE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Public_Ed25519_PDU : public ConcretePDU {
public:
    Public_Ed25519_PDU();
    void set_data(Public_Ed25519 &);
    Public_Ed25519 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Public_Ed25519 & d);
    const Public_Ed25519 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Public_Curve25519_PDU : public ConcretePDU {
public:
    Public_Curve25519_PDU();
    void set_data(Public_Curve25519 &);
    Public_Curve25519 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Public_Curve25519 & d);
    const Public_Curve25519 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Public_OAQUE_PDU : public ConcretePDU {
public:
    Public_OAQUE_PDU();
    void set_data(Public_OAQUE &);
    Public_OAQUE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Public_OAQUE & d);
    const Public_OAQUE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Params_BN256_OAQUE_PDU : public ConcretePDU {
public:
    Params_BN256_OAQUE_PDU();
    void set_data(Params_BN256_OAQUE &);
    Params_BN256_OAQUE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Params_BN256_OAQUE & d);
    const Params_BN256_OAQUE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Params_BN256_IBE_PDU : public ConcretePDU {
public:
    Params_BN256_IBE_PDU();
    void set_data(Params_BN256_IBE &);
    Params_BN256_IBE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Params_BN256_IBE & d);
    const Params_BN256_IBE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Public_BN256_IBE_PDU : public ConcretePDU {
public:
    Public_BN256_IBE_PDU();
    void set_data(Public_BN256_IBE &);
    Public_BN256_IBE *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Public_BN256_IBE & d);
    const Public_BN256_IBE *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC KeyringAESCiphertext_PDU : public ConcretePDU {
public:
    KeyringAESCiphertext_PDU();
    void set_data(KeyringAESCiphertext &);
    KeyringAESCiphertext *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const KeyringAESCiphertext & d);
    const KeyringAESCiphertext *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC objects_Control : public OssControl {
public:
    objects_Control();
    objects_Control(const objects_Control &);
};


/* External definitions for named values */

extern OSS_PUBLIC const OssEncOID& wave_id;

extern OSS_PUBLIC const OssEncOID& wave_object;

extern OSS_PUBLIC const OssEncOID& attestation_id;

extern OSS_PUBLIC const OssEncOID& entity_id;

extern OSS_PUBLIC const OssEncOID& explicit_proof_id;

extern OSS_PUBLIC const OssEncOID& entity_secret_id;

extern OSS_PUBLIC const OssEncOID& attestation_body_scheme;

extern OSS_PUBLIC const OssEncOID& unencrypted_body_scheme;

extern OSS_PUBLIC const OssEncOID& wr1_body_scheme_v1;

extern OSS_PUBLIC const OssEncOID& psk_body_scheme;

extern OSS_PUBLIC const OssEncOID& attestation_verifier_key_scheme;

extern OSS_PUBLIC const OssEncOID& attestation_verifier_key_aes128_gcm;

extern OSS_PUBLIC const OssEncOID& outer_signature_scheme;

extern OSS_PUBLIC const OssEncOID& ephemeral_ed25519;

extern OSS_PUBLIC const OssEncOID& outer_signature_binding_scheme;

extern OSS_PUBLIC const OssEncOID& signed_outer_key;

extern OSS_PUBLIC const OssEncOID& revocation_check_schemes;

extern OSS_PUBLIC const OssEncOID& location_scheme;

extern OSS_PUBLIC const OssEncOID& location_url_id;

extern OSS_PUBLIC const OssEncOID& location_ethereum_v1_id;

extern OSS_PUBLIC const OssEncOID& hash_scheme;

extern OSS_PUBLIC const OssEncOID& sha3_256_id;

extern OSS_PUBLIC const OssEncOID& keccak_256_id;

extern OSS_PUBLIC const OssEncOID& sha_256_id;

extern OSS_PUBLIC const OssEncOID& revocation_scheme;

extern OSS_PUBLIC const OssEncOID& commitment_revocation_id;

extern OSS_PUBLIC const OssEncOID& entity_key_scheme;

extern OSS_PUBLIC const OssEncOID& ed25519_id;

extern OSS_PUBLIC const OssEncOID& curve25519_id;

extern OSS_PUBLIC const OssEncOID& oaque_bn256_s20_attributeset_id;

extern OSS_PUBLIC const OssEncOID& oaque_bn256_s20_params_id;

extern OSS_PUBLIC const OssEncOID& ibe_bn256_params_id;

extern OSS_PUBLIC const OssEncOID& ibe_bn256_public_id;

extern OSS_PUBLIC const OssEncOID& policy_scheme;

extern OSS_PUBLIC const OssEncOID& trust_level;

extern OSS_PUBLIC const OssEncOID& resource_tree;

extern OSS_PUBLIC const OssEncOID& policy_addendum_scheme;

extern OSS_PUBLIC const OssEncOID& wr1_domain_visibility_key;

extern OSS_PUBLIC const OssEncOID& wr1_partition_key;

extern OSS_PUBLIC const OssEncOID& wr1_oaque_encryption_key;

extern OSS_PUBLIC const OssEncOID& entity_secret_key_scheme;

extern OSS_PUBLIC const OssEncOID& ed25519_secret_id;

extern OSS_PUBLIC const OssEncOID& curve25519_secret_id;

extern OSS_PUBLIC const OssEncOID& oaque_bn256_s20_private_key_id;

extern OSS_PUBLIC const OssEncOID& oaque_bn256_s20_master_key_id;

extern OSS_PUBLIC const OssEncOID& bn256_ibe_master_key_id;

extern OSS_PUBLIC const OssEncOID& bn256_ibe_private_key_id;

extern OSS_PUBLIC const OssEncOID& entity_keyring_scheme;

extern OSS_PUBLIC const OssEncOID& plaintext_keyring_id;

extern OSS_PUBLIC const OssEncOID& aes128_gcm_pbkdf2;

#endif // OSS_objects
